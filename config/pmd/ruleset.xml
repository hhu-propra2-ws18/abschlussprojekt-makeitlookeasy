<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  name="check-code-for-bad-stuff"
  xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
  xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0
  http://pmd.sourceforge.net/">
  <description>
    This ruleset checks my code for bad stuff
  </description>
  <rule ref="rulesets/java/basic.xml"/>
  <rule ref="rulesets/java/braces.xml"/>
  <rule ref="rulesets/java/clone.xml"/>
  <rule ref="rulesets/java/codesize.xml"/>
  <rule ref="rulesets/java/controversial.xml"/>
  <rule ref="rulesets/java/coupling.xml"/>
  <rule ref="rulesets/java/design.xml"/>
  <rule ref="rulesets/java/empty.xml"/>
  <rule ref="rulesets/java/finalizers.xml"/>
  <rule ref="rulesets/java/imports.xml"/>
  <rule ref="rulesets/java/j2ee.xml"/>
  <rule ref="rulesets/java/javabeans.xml"/>
  <rule ref="rulesets/java/junit.xml"/>
  <rule ref="rulesets/java/logging-jakarta-commons.xml"/>
  <rule ref="rulesets/java/logging-java.xml"/>
  <rule ref="rulesets/java/migrating.xml"/>
  <rule ref="rulesets/java/naming.xml"/>
  <rule ref="rulesets/java/optimizations.xml"/>
  <rule ref="rulesets/java/strictexception.xml"/>
  <rule ref="rulesets/java/strings.xml"/>
  <rule ref="rulesets/java/sunsecure.xml"/>
  <rule ref="rulesets/java/typeresolution.xml"/>
  <rule ref="rulesets/java/unnecessary.xml"/>
  <rule ref="rulesets/java/unusedcode.xml"/>

  <!-- Controversial rule, we decided to not use it
       https://github.com/pmd/pmd/issues/387 -->
  <!-- This rule also conflicts with assignments from streams -->
  <!-- This rule also conflicts with the usage of lambda functions -->
  <rule ref="category/java/errorprone.xml/DataflowAnomalyAnalysis">
    <properties>
      <property name="violationSuppressRegex" value="^Found 'DD'.*|^Found 'UR'.*|^Found 'DU'.*"/>
    </properties>
  </rule>

  <!-- We disagree with this rule, since we think there can be class variables that are not
       accessible but should be persisted -->
  <rule ref="category/java/errorprone.xml/BeanMembersShouldSerialize">
    <properties>
      <property name="violationSuppressRegex" value="^Found non-transient.*"/>
    </properties>
  </rule>

  <!-- This rule is in conflict with fluent APIs -->
  <rule ref="category/java/design.xml/LawOfDemeter">
    <properties>
      <property name="violationSuppressRegex" value=".*"/>
    </properties>
  </rule>

  <!-- We ignore this rule since we want to use default constructors in some places  -->
  <rule ref="category/java/codestyle.xml/AtLeastOneConstructor">
    <properties>
      <property name="violationSuppressRegex" value="Each class should declare at least one constructor"/>
    </properties>
  </rule>

  <!-- We ignore this rule since we prefer early returns over if else blocks  -->
  <rule ref="category/java/codestyle.xml/OnlyOneReturn">
    <properties>
      <property name="violationSuppressRegex" value="A method should have only one exit point.*"/>
    </properties>
  </rule>

  <!-- this is ignored since we want to use package-private accessors -->
  <rule ref="category/java/codestyle.xml/DefaultPackage">
    <properties>
      <property name="violationSuppressRegex" value="^Use explicit scoping.*"/>
    </properties>
  </rule>

  <!-- we want to use id as a variable name -->
  <rule ref="category/java/codestyle.xml/ShortVariable">
    <properties>
      <property name="violationSuppressRegex" value="^Avoid variables with short names like id"/>
    </properties>
  </rule>
</ruleset>

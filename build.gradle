plugins {
    id 'java'
    id "org.springframework.boot" version "2.1.1.RELEASE"
    id "org.sonarqube" version "2.7"
    id 'com.avast.gradle.docker-compose' version "0.8.14"
    id "com.github.spotbugs" version "1.6.10"
    id "com.github.ksoichiro.console.reporter" version "0.6.2"
    id "com.adarshr.test-logger" version "1.6.0"
    id "net.rdrei.android.buildtimetracker" version "0.11.0"
    id "info.solidsoft.pitest" version "1.4.0"
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'eclipse'
    id 'idea'
    id "io.freefair.lombok" version "3.1.0"
}

apply plugin: 'com.github.spotbugs'
apply plugin: 'io.spring.dependency-management'
apply from: './config/gradle/tasks.gradle'
apply from: './config/gradle/code-quality.gradle'
apply from: './config/gradle/docker-compose.gradle'

group = 'de.propra2'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


repositories {
    jcenter()
}

gradle.taskGraph.whenReady { graph ->
    println("Checking folder structure..")
    def proc = "./scripts/init.sh".execute()
    proc.waitForProcessOutput(System.out, System.err)
}

javadoc {
    source = sourceSets.main.allJava
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

bootRun {
    classpath = sourceSets.main.runtimeClasspath + configurations.developmentOnly
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    group = "verification"
    source = fileTree('src/main/java')
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

dependencies {
    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }

    implementation 'com.github.javafaker:javafaker:0.17.2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.session:spring-session-core'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.12.0'
//    testCompile 'org.powermock:powermock-api-mockito2:2.0.0'
//    testCompile 'org.powermock:powermock-classloading-base:2.0.0'
//    testCompile 'org.powermock:powermock-classloading-xstream:2.0.0'
//    testCompile 'org.powermock:powermock-module-junit4:2.0.0'
//    testCompile 'org.powermock:powermock-module-junit4-rule:2.0.0'
    testCompile 'org.jmockit:jmockit:1.45'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
}


configurations.all {
    exclude module: 'slf4j-log4j12'
}

sourceSets.main.java.srcDirs = ['src/main/java']
